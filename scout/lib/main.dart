import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'theme/app_theme.dart';
import 'features/dashboard/dashboard_page.dart';


// GENERATED by `flutterfire configure`
import 'firebase_options.dart';

/// Global theme mode notifier for toggling theme
class ThemeModeNotifier extends ValueNotifier<ThemeMode> {
  ThemeModeNotifier._() : super(ThemeMode.light);
  static final ThemeModeNotifier instance = ThemeModeNotifier._();
  void toggle() {
    value = value == ThemeMode.light ? ThemeMode.dark : ThemeMode.light;
  }
}

// Initialize Firebase once (safe on hot restart)
Future<void> _initFirebase() async {
  WidgetsFlutterBinding.ensureInitialized();
  if (Firebase.apps.isEmpty) {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  } else {
    // Reuse existing app on hot restart
    Firebase.app();
  }
}

final Future<void> _firebaseReady = _initFirebase();

void main() {
  runApp(const ScoutApp());
}

class ScoutApp extends StatelessWidget {
  const ScoutApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<ThemeMode>(
      valueListenable: ThemeModeNotifier.instance,
      builder: (context, mode, _) => MaterialApp(
        title: 'SCOUT',
        debugShowCheckedModeBanner: false,
        theme: BrandTheme().lightTheme,
        darkTheme: BrandTheme().darkTheme,
        themeMode: mode,
        // Gate the app on Firebase init so no widget hits Firestore too early.
        home: FutureBuilder<void>(
          future: _firebaseReady,
          builder: (context, snap) {
            if (snap.connectionState != ConnectionState.done) {
              return const Scaffold(
                body: Center(child: CircularProgressIndicator()),
              );
            }
            if (snap.hasError) {
              // Helpful error on web if config is missing/mis-typed
              return Scaffold(
                body: Center(
                  child: Padding(
                    padding: const EdgeInsets.all(24),
                    child: Text(
                      'Firebase failed to initialize:\n${snap.error}',
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
              );
            }
            return const DashboardPage();
          },
        ),
      ),
    );
  }
}
