import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'theme/app_theme.dart';
import 'features/dashboard/dashboard_page.dart';

// GENERATED by `flutterfire configure`
import 'firebase_options.dart';

/// Theme toggle
class ThemeModeNotifier extends ValueNotifier<ThemeMode> {
  ThemeModeNotifier._() : super(ThemeMode.system);
  static final ThemeModeNotifier instance = ThemeModeNotifier._();
  void toggle() {
    // Cycle: system → light → dark → system
    if (value == ThemeMode.system) {
      value = ThemeMode.light;
    } else if (value == ThemeMode.light) {
      value = ThemeMode.dark;
    } else {
      value = ThemeMode.system;
    }
  }
}

/// Lightweight operator store (name shown in UI, cached locally)
class OperatorStore {
  static final name = ValueNotifier<String?>(null);

  static Future<void> load() async {
    final sp = await SharedPreferences.getInstance();
    name.value = sp.getString('operator_name');
  }

  static Future<void> set(String? n) async {
    final sp = await SharedPreferences.getInstance();
    if (n == null || n.trim().isEmpty) {
      await sp.remove('operator_name');
      name.value = null;
    } else {
      final v = n.trim();
      await sp.setString('operator_name', v);
      name.value = v;
    }
  }
}

/// Initialize Firebase (single app) and ensure anonymous auth + operator loaded
Future<void> _bootstrap() async {
  WidgetsFlutterBinding.ensureInitialized();

  if (Firebase.apps.isEmpty) {
    await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  } else {
    Firebase.app();
  }

  // Silent, persistent anonymous auth so every write has a stable uid
  try {
    await FirebaseAuth.instance.setPersistence(Persistence.LOCAL);
  } catch (_) {
    // On some web runtimes, setPersistence may be a no-op or throw; ignore.
  }
  if (FirebaseAuth.instance.currentUser == null) {
    await FirebaseAuth.instance.signInAnonymously();
  }

  await OperatorStore.load();
}

final Future<void> _ready = _bootstrap();

void main() {
  runApp(const ScoutApp());
}

class ScoutApp extends StatelessWidget {
  const ScoutApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<ThemeMode>(
      valueListenable: ThemeModeNotifier.instance,
      builder: (context, mode, _) {
        return MaterialApp(
          title: 'SCOUT',
          debugShowCheckedModeBanner: false,
          theme: BrandTheme().lightTheme,
          darkTheme: BrandTheme().darkTheme,
          themeMode: mode,
          home: FutureBuilder<void>(
            future: _ready,
            builder: (context, snap) {
              if (snap.connectionState != ConnectionState.done) {
                return const Scaffold(
                  body: Center(child: CircularProgressIndicator()),
                );
              }
              if (snap.hasError) {
                return Scaffold(
                  body: Center(
                    child: Padding(
                      padding: const EdgeInsets.all(24),
                      child: SelectableText(
                        'Startup failed:\n${snap.error}\n\n'
                        '• Check firebase_options.dart matches your project\n'
                        '• Verify hosting is served over HTTPS\n'
                        '• See browser console for details',
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ),
                );
              }
              return const DashboardPage();
            },
          ),
        );
      },
    );
  }
}
